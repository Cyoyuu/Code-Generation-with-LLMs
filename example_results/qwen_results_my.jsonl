{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    current = n\n    for _ in range(n):\n        result.append(current)\n        if n % 2 == 0:\n            current += 2\n        else:\n            current += 2\n    return result"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return [word.strip() for word in re.split(r'[\\s,]+', s) if word.strip()]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = total / count\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_only_odd_digits(n):\n        for digit in str(n):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    result = [num for num in x if has_only_odd_digits(num)]\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    number_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    filtered = [num for num in arr if 1 <= num <= 9]\n    filtered.sort()\n    filtered.reverse()\n    result = [number_to_word[num] for num in filtered]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            total = 0\n            for j in range(1, i + 1):\n                total += j\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def digit_sum(n):\n        if n == 0:\n            return 0\n        digits = list(map(int, str(abs(n))))\n        if n < 0:\n            digits[0] *= -1\n        return sum(digits)\n    return sum(1 for num in arr if digit_sum(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            if all(arr[j] <= arr[j+1] for j in range(i+1, n-1)) and arr[-1] <= arr[0]:\n                return True\n            else:\n                return False\n    return True"}
