{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if n % 2 == 0:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word for word in re.split(r'[,\\s]+', s) if word]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = total / (m - n + 1)\n    rounded = round(average)\n    return bin(rounded)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(d) % 2 != 0 for d in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    return list(map(lambda x: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1], reversed(sorted([num for num in arr if 1 <= num <= 9]))))"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return int(str(n)[0]) + sum(int(d) for d in str(n)[1:])\n        else:\n            return sum(int(d) for d in str(n))\n    return sum(1 for num in arr if digit_sum(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            count += 1\n        if count > 1:\n            return False\n    return True"}
